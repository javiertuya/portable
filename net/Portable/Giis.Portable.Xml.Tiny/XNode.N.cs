//This file is autogenerated. Do not edit
using System;
using System.Collections.Generic;
using System.Xml;

namespace Giis.Portable.Xml.Tiny
{
    /// <summary>
	/// Simple wrapper to read xml documents with unified management of text and element nodes.
	/// Includes a few methods to manipulate the document
    /// </summary>
    public class XNode : XNodeAbstract
	{
		protected XmlNode node = null; // not private to allow extend this class

        public XNode(string xml)
		{
			XmlDocument doc = NewDocument(xml);
            this.node = doc.DocumentElement; //firstchild localizara otros elementos que pueda haber
		}
        // Not private to be more extensible
        public XNode(XmlNode nativeNode)
		{
			this.node = nativeNode;
		}
        public XmlNode getNativeNode()
        {
            return this.node;
        }

        public override bool IsElement()
        {
            return this.node.NodeType == XmlNodeType.Element;
        }
        public override bool IsText()
        {
            return this.node.NodeType == XmlNodeType.Text;
        }
        public override XNode CreateElement(String elementName)
        {
            return new XNode(this.node.OwnerDocument.CreateElement(elementName));
        }
        public override XNode CreateText(String textValue)
        {
            return new XNode(this.node.OwnerDocument.CreateTextNode(textValue));
        }

        public override string Name()
		{
			return this.node.Name;
		}

        public override string InnerText()
        {
            return this.node.InnerText;
        }
        public override void SetInnerText(String value)
        {
            this.node.InnerText=value;
        }

        public override string OuterXml()
        {
            return this.node.OuterXml;
        }
        public override string InnerXml()
        {
            return this.node.InnerXml;
        }
        public override string ToString()
		{
            return this.node.OuterXml;
		}

        public override string GetAttribute(string name)
        {
            if (!this.IsElement()) //los nodos texto o de otro tipo no tienen atributos
                return "";
            if (this.node.Attributes[name] == null)
                return "";
            return ((XmlElement)this.node).GetAttribute(name);
        }

        public override void SetAttribute(string name, string value)
        {
            if (!this.IsElement())
                return;
            ((XmlElement)this.node).SetAttribute(name, value);
        }

        public override IList<string> GetAttributeNames()
        {
            List<string> attrs = new List<string>();
            if (!this.IsElement())
                return attrs;
            XmlAttributeCollection na = this.node.Attributes;
            for (int i = 0; i < na.Count; i++)
                attrs.Add(na.Item(i).Name);
            attrs.Sort();
            return attrs;
        }

        public override XNode GetFirstChild()
        {
            return new XNode(this.node.FirstChild);
        }
        public override XNode AppendChild(string elementName)
        {
            return AppendChild(this.CreateElement(elementName));
        }
        public XNode AppendChild(XNode elementOrTextNode)
        {
            XmlNode newChild = this.node.AppendChild(elementOrTextNode.getNativeNode());
            return new XNode(newChild);
        }


        // Additional methods for internal use

        /// <summary>
		/// Creates a new XmlDocument from the xml string
		/// </summary>
        private XmlDocument NewDocument(string xml)
		{
            XmlDocument doc = new XmlDocument();
            doc.PreserveWhitespace = true;
            doc.LoadXml(xml);
            return doc;
		}

        //Returns child element or text nodes as indicated
        //If element, allows search by node name, oherwise, set elementName to null
        protected internal override IList<XNode> GetChildren(bool returnElements, bool returnTexts, String elementName, bool onlyFirst)
		{
			IList<XNode> children = new List<XNode>();
			XmlNode child = node.FirstChild;
			while (child != null)
			{
				if (returnElements && child.NodeType == XmlNodeType.Element && (elementName == null || child.Name == elementName)
                    || returnTexts && child.NodeType == XmlNodeType.Text)
					{
						children.Add(new XNode(child));
						if (onlyFirst) //para devolver solo el primero que se encuentra
							return children;
					}
				child = child.NextSibling;
			}
			return children;
		}

        //not exactly as its java counterpart, only to compile tests
        public string ToXmlDocument()
        {
            return node.OuterXml;
        }
    }
}
