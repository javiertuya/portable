//This file is autogenerated. Do not edit
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

namespace Giis.Portable.Xml.Tiny
{
    /// <summary>
	/// Simple wrapper to read xml documents with unified management of text and element nodes.
	/// Includes a few methods to manipulate the document
    /// </summary>
    public class XNode : XNodeAbstract
	{
		private XmlNode node = null;

		public XNode(string xml)
		{
			XmlDocument doc = NewDocument(xml);
            this.node = doc.DocumentElement; //firstchild localizara otros elementos que pueda haber
		}

		private XNode(XmlNode nativeNode)
		{
			this.node = nativeNode;
		}

		public override string GetAttribute(string name)
		{
			if (!IsElement(this.node)) //los nodos texto o de otro tipo no tienen atributos
				return "";
            if (this.node.Attributes[name] == null)
                return "";
			return ((XmlElement)this.node).GetAttribute(name);
		}

		public override void SetAttribute(string name, string value)
		{
			if (!IsElement(this.node))
				return;
            ((XmlElement)this.node).SetAttribute(name, value);
		}

		public override IList<string> GetAttributeNames()
		{
			List<string> attrs = new List<string>();
			if (!IsElement(this.node))
				return attrs;
			XmlAttributeCollection na = this.node.Attributes;
			for (int i = 0; i < na.Count; i++)
				attrs.Add(na.Item(i).Name);
			attrs.Sort();
			return attrs;
		}

        /// <summary>
        /// Gets the first child with the specified name, null if it does not exist
        /// </summary>
        public override XNode GetChild(string elementName)
		{
			IList<XNode> children = GetChildren(elementName, false);
			if (children.Count > 0)
			{
				//solo habra un child, si es que lo encuentra
				return children[0];
			}
			return null;
		}
        /// <summary>
        /// Gets a list of all children with the specified name
        /// </summary>
        public override IList<XNode> GetChildren(string elementName)
		{
			return GetChildren(elementName, true);
		}

        public override XNode GetFirstChild()
        {
            return new XNode(this.node.FirstChild);
        }

        public override string Name()
		{
			return this.node.Name;
		}

        public override string InnerText()
        {
            return this.node.InnerText;
        }
        public override void SetInnerText(String value)
        {
            this.node.InnerText=value;
        }

        public override XNode AppendChild(String elementName)
        {
            XmlNode newChild = this.node.OwnerDocument.CreateElement(elementName);
            this.node.AppendChild(newChild);
            return new XNode(newChild);
        }

        public override string OuterXml()
        {
            return this.node.OuterXml;
        }
        public override string InnerXml()
        {
            return this.node.InnerXml;
        }
        public override string ToString()
		{
            return this.node.OuterXml;
		}

        // Additional methods for internal use

        /// <summary>
		/// Creates a new XmlDocument from the xml string
		/// </summary>
        private XmlDocument NewDocument(string xml)
		{
            XmlDocument doc = new XmlDocument();
            doc.PreserveWhitespace = true;
            doc.LoadXml(xml);
            return doc;
		}

		private IList<XNode> GetChildren(string elementName, bool returnAll)
		{
			IList<XNode> children = new List<XNode>();
			XmlNode child = node.FirstChild;
			while (child != null)
			{
				if (IsElement(child))
					if (child.Name.Equals(elementName))
					{
						children.Add(new XNode(child));
						if (!returnAll) //para devolver solo el primero que se encuentra
							return children;
					}
				child = child.NextSibling;
			}
			return children;
		}

		private bool IsElement(XmlNode n)
		{
			return n.NodeType==XmlNodeType.Element;
		}

	}
}
