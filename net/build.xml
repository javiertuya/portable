<project name="Portable" default="convert" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:dn="antlib:org.apache.ant.dotnet" xmlns="antlib:org.apache.tools.ant">

	<description>Conversion from Java to C# using JavaToCSharp</description>
  
  <!-- To prepare and publish to the GitHub package repository see build-nuget-prepare.sh in javiertuya/portable repo -->

  <macrodef name="runConvert" description="Execute the JavaToCSharp converter">
    <attribute name="input" />
    <attribute name="output" />
    <attribute name="mapping" default="" />
    <sequential>
      <delete>
        <fileset dir="@{output}" includes="*.cs" />
      </delete>
      <echo>Converting '@{input}' to '@{output}' - Mapping file: '@{mapping}'</echo>
      <!--<exec executable="JavaToCSharp-temp/JavaToCSharpCli/bin/Debug/net8.0/JavaToCSharpCli" failonerror="true">-->
      <exec executable="JavaToCSharpCli" failonerror="true">
        <arg value="--include-subdirectories" />
        <arg value="false" />
        <arg value="--start-interface-names-with-i" />
        <arg value="false" />
        <arg value="--add-using" />
        <arg value="converted.placeholder" />
        <arg value="--mappings-file" unless:blank="mapping" />
        <arg value="@{mapping}" unless:blank="mapping" />
        <arg value="dir" />
        <arg value="@{input}" />
        <arg value="@{output}" />
      </exec>
    </sequential>
  </macrodef>

  <target name="convert" description="Perform the conversion and the required postprocessing">
    <runConvert input="../java/src/main/java/giis/portable/xml/tiny" output="Portable/Translated/Giis.Portable.Xml.Tiny" />
    <delete file="Portable/Translated/Giis.Portable.Xml.Tiny/XNode.cs" />
    <delete file="Portable/Translated/Giis.Portable.Xml.Tiny/XmlException.cs" />

    <runConvert input="../java/src/test/java/giis/portable" output="PortableTest/Translated/Giis.Portable" mapping="java-mappings.yml" />

    <replace dir=".">
      <include name="Portable*/Translated/**/*" />
      <replacefilter token="using converted.placeholder;" value="/////// THIS FILE HAS BEEN AUTOMATICALLY CONVERTED FROM THE JAVA SOURCES. DO NOT EDIT ///////" />
      <!-- nunit requires the exact exception in assert throws, allows derived types -->
      <replacefilter token="Assert.Throws(typeof(Exception)" value="Assert.Throws(Is.InstanceOf(typeof(Exception))" />

      <!-- Replacement to handle maps (implementations are in the Java.Util namespace) -->
      <replacefilter token="Dictionary&lt;" value="Map&lt;" />
    </replace>
  </target>

</project>